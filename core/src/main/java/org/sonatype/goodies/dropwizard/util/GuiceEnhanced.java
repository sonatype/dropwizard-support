/*
 * Copyright (c) 2018-present Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package org.sonatype.goodies.dropwizard.util;

import java.lang.reflect.Method;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Helper to cope with Guice AOP enhanced classes.
 *
 * @since 1.0.2
 */
public final class GuiceEnhanced
{
  private GuiceEnhanced() {
    // empty
  }

  /**
   * Class-name token which indicates class is synthetic generated by Guice AOP.
   */
  private static final String GUICE_ENHANCED = "$$EnhancerByGuice$$";

  /**
   * Check if given class is enhanced by Guice.
   */
  public static boolean isEnhanced(final Class<?> type) {
    checkNotNull(type);
    return type.getName().contains(GUICE_ENHANCED);
  }

  /**
   * Check if given method is enhanced by Guice.
   */
  public static boolean isEnhanced(final Method method) {
    checkNotNull(method);
    return isEnhanced(method.getDeclaringClass());
  }

  /**
   * Dereference enhanced class.
   */
  public static Class<?> dereference(final Class<?> type) {
    if (isEnhanced(type)) {
      return type.getSuperclass();
    }
    return type;
  }

  /**
   * Dereference enhanced method.
   */
  public static Method dereference(final Method method) {
    checkNotNull(method);
    if (isEnhanced(method)) {
      Class<?> type = method.getDeclaringClass().getSuperclass();
      try {
        return type.getMethod(method.getName(), method.getParameterTypes());
      }
      catch (NoSuchMethodException e) {
        throw new RuntimeException(e);
      }
    }
    return method;
  }
}
